import sys
import gc
import os
import pynvml
import psutil
import logging
import uuid
import faiss_manager
import cv2
import numpy as np
from PyQt5.QtWidgets import (QApplication, QMainWindow, QLabel, QVBoxLayout, QWidget, 
                             QPushButton, QListWidget, QGroupBox, QHBoxLayout, 
                             QFileDialog, QMessageBox, QListWidgetItem, QGridLayout,
                             QStatusBar, QStyle, QDialog, QSlider,
                             QStyleOptionSlider)
from PyQt5.QtCore import Qt, QSize, QTimer, QRect
from PyQt5.QtGui import QPixmap, QImage, QPainter, QColor, QPen
import database_manager as db
from face_processor import FaceProcessor
from add_student_dialog import AddStudentDialog
from config import RESIZE_FACTOR
from scaler import FixedScaler
from Video_Thread import VideoThread
from time import time

class CustomSlider(QSlider):
    """
    L·ªõp QSlider t√πy ch·ªânh cho ph√©p click chu·ªôt ƒë·ªÉ nh·∫£y ƒë·∫øn v·ªã tr√≠ mong mu·ªën.
    """
    def mousePressEvent(self, event):
        if event.button() == Qt.LeftButton:
            # T√≠nh to√°n gi√° tr·ªã m·ªõi d·ª±a tr√™n v·ªã tr√≠ click chu·ªôt
            option = QStyleOptionSlider()
            self.initStyleOption(option)
            
            # L·∫•y v·ªã tr√≠ c·ªßa r√£nh tr∆∞·ª£t
            groove_rect = self.style().subControlRect(QStyle.CC_Slider, option, QStyle.SC_SliderGroove, self)
            # L·∫•y v·ªã tr√≠ c·ªßa con tr∆∞·ª£t
            handle_rect = self.style().subControlRect(QStyle.CC_Slider, option, QStyle.SC_SliderHandle, self)

            # ƒê·∫£m b·∫£o click n·∫±m ngo√†i con tr∆∞·ª£t hi·ªán t·∫°i
            if not handle_rect.contains(event.pos()):
                # Chuy·ªÉn ƒë·ªïi v·ªã tr√≠ click sang gi√° tr·ªã c·ªßa slider
                if self.orientation() == Qt.Horizontal:
                    # C√¥ng th·ª©c t√≠nh gi√° tr·ªã d·ª±a tr√™n v·ªã tr√≠ x c·ªßa chu·ªôt
                    new_val = QStyle.sliderValueFromPosition(
                        self.minimum(), 
                        self.maximum(), 
                        event.x() - groove_rect.x(), 
                        groove_rect.width(), 
                        option.upsideDown
                    )
                else:
                    # T∆∞∆°ng t·ª± cho slider d·ªçc
                    new_val = QStyle.sliderValueFromPosition(
                        self.minimum(), 
                        self.maximum(), 
                        groove_rect.height() - (event.y() - groove_rect.y()), 
                        groove_rect.height(), 
                        option.upsideDown
                    )
                
                # ƒê·∫∑t gi√° tr·ªã m·ªõi v√† ph√°t t√≠n hi·ªáu
                self.setValue(new_val)
                self.sliderReleased.emit() # Ph√°t t√≠n hi·ªáu ƒë·ªÉ tua video ngay l·∫≠p t·ª©c
        
        # G·ªçi l·∫°i s·ª± ki·ªán g·ªëc ƒë·ªÉ gi·ªØ c√°c ch·ª©c nƒÉng kh√°c
        super().mousePressEvent(event)

# C·ª≠a s·ªï ch√≠nh c·ªßa ·ª©ng d·ª•ng
class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("H·ªá th·ªëng Nh·∫≠n di·ªán Khu√¥n m·∫∑t")
        self.setGeometry(100, 100, 1280, 720)

        # --- B∆∞·ªõc 1: Kh·ªüi t·∫°o c√°c ƒë·ªëi t∆∞·ª£ng x·ª≠ l√Ω v√† d·ªØ li·ªáu ---
        self.scaler = FixedScaler(target_width=640)

        # T·∫£i ch·ªâ m·ª•c Faiss v√† √°nh x·∫° ID
        self.faiss_index, self.id_mapping = faiss_manager.load_index()

        self.known_students = db.get_all_students()
        self.known_students_dict = {s['id']: s for s in self.known_students}
        
        # Kh·ªüi t·∫°o FaceProcessor v·ªõi ch·ªâ m·ª•c Faiss
        self.face_processor = FaceProcessor(self.faiss_index, self.id_mapping)

        # --- B∆∞·ªõc 2: Kh·ªüi t·∫°o c√°c bi·∫øn tr·∫°ng th√°i c·ªßa ·ª©ng d·ª•ng ---
        self.thread = None
        self.current_frame = None  # ƒê·ªïi t√™n t·ª´ current_frame_cv cho nh·∫•t qu√°n
        self.recognition_results = []
        self.selected_student_id = None
        self.last_results = []

        # --- B∆∞·ªõc 3: Khai b√°o tr∆∞·ªõc c√°c bi·∫øn s·∫Ω ch·ª©a Widget (ƒë∆∞·ª£c t·∫°o trong init_ui) ---
        self.image_label = None
        self.student_list_widget = None
        
        # Widget ƒëi·ªÅu khi·ªÉn video v√† c√°c th√†nh ph·∫ßn
        self.video_controls_widget = None
        self.play_pause_button = None
        self.video_slider = None
        self.time_label = None
        
        # N√∫t s·ª≠a th√¥ng tin
        self.add_student_button = None
        self.edit_student_button = None
        self.delete_button = None

        # --- B∆∞·ªõc 3: Bi·∫øn ƒë·ªÉ l∆∞u tr·ªØ FPS v√† th√¥ng tin t√†i nguy√™n ---
        self.current_fps = 0.0
        self.resource_info = {
            "cpu_usage": 0.0,
            "ram_used": 0.0,
            "ram_total": 0.0,
            "ram_usage": 0.0,
            "gpu_usage": 0.0,
            "gpu_memory_used": 0.0,
            "gpu_memory_total": 0.0
        }
        # --- B∆∞·ªõc 5: Kh·ªüi t·∫°o thanh tr·∫°ng th√°i ---
        self.status_bar = QStatusBar(self)
        self.setStatusBar(self.status_bar)
        self.status_bar.showMessage("S·∫µn s√†ng")

        # Kh·ªüi t·∫°o timer ƒë·ªÉ theo d√µi t√†i nguy√™n
        self.resource_timer = QTimer(self)
        self.resource_timer.timeout.connect(self.update_resource_usage)
        self.resource_timer.start(2000)  # C·∫≠p nh·∫≠t m·ªói 2 gi√¢y
        
        # Kh·ªüi t·∫°o pynvml ƒë·ªÉ theo d√µi GPU
        self.gpu_available = False
        # try:
        #     pynvml.nvmlInit()
        #     self.gpu_available = True
        # except pynvml.NVMLError:
        #     logging.warning("Kh√¥ng th·ªÉ kh·ªüi t·∫°o pynvml. Theo d√µi GPU b·ªã t·∫Øt.")

        # --- B∆∞·ªõc 4: G·ªçi c√°c h√†m d·ª±ng giao di·ªán ---
        self.init_ui()

    def init_ui(self):
        """Kh·ªüi t·∫°o giao di·ªán ng∆∞·ªùi d√πng v·ªõi b·ªë c·ª•c gi·ªØ nguy√™n, v√† thanh ƒëi·ªÅu khi·ªÉn b·∫±ng chi·ªÅu r·ªông video."""
        central_widget = QWidget()
        self.setCentralWidget(central_widget)

        main_v_layout = QVBoxLayout(central_widget)
        top_h_layout = QHBoxLayout()

        # -------------------------
        # üì∑ C·ªôt tr√°i: ·∫¢nh/video + ƒëi·ªÅu khi·ªÉn video (g·ªôp v√†o layout d·ªçc)
        # -------------------------
        left_v_layout = QVBoxLayout()

        self.image_label = QLabel("M·ªü ngu·ªìn video ƒë·ªÉ b·∫Øt ƒë·∫ßu")
        self.image_label.setStyleSheet("border: 2px solid #ccc; background-color: #f0f0f0;")
        self.image_label.setAlignment(Qt.AlignCenter)
        self.image_label.setScaledContents(True)

        # üëâ Cho ph√©p ƒëi·ªÅu ch·ªânh k√≠ch th∆∞·ªõc ·∫£nh (c√≥ th·ªÉ c·ªë ƒë·ªãnh n·∫øu mu·ªën)
        self.image_label.setFixedWidth(640)
        self.image_label.setFixedHeight(480)

        left_v_layout.addWidget(self.image_label)

        # üéöÔ∏è Thanh ƒëi·ªÅu khi·ªÉn video n·∫±m ngay d∆∞·ªõi video
        video_controls = self.create_video_controls()
        video_controls.setVisible(False)  # ·∫®n m·∫∑c ƒë·ªãnh
        video_controls.setFixedWidth(self.image_label.width())  # ‚úÖ ƒë·∫∑t chi·ªÅu r·ªông b·∫±ng ·∫£nh
        self.video_controls_widget = video_controls

        left_v_layout.addWidget(video_controls)

        top_h_layout.addLayout(left_v_layout, 7)

        # -------------------------
        # üìã C·ªôt ph·∫£i: ƒëi·ªÅu khi·ªÉn kh√°c
        # -------------------------
        right_panel_v_layout = QVBoxLayout()
        controls_group = self.create_controls_group()
        list_group = self.create_list_group()
        info_group = self.create_info_group()

        right_panel_v_layout.addWidget(controls_group)
        right_panel_v_layout.addWidget(list_group)
        right_panel_v_layout.addWidget(info_group)

        top_h_layout.addLayout(right_panel_v_layout, 3)

        # -------------------------
        # üìê T·ªïng layout
        # -------------------------
        main_v_layout.addLayout(top_h_layout)

        # -------------------------
        # üìå K·∫øt n·ªëi s·ª± ki·ªán
        # -------------------------
        self.student_list_widget.itemClicked.connect(self.display_student_info)
        self.image_label.mousePressEvent = self.on_image_click

    def create_list_group(self):
        """T·∫°o group box cho danh s√°ch h·ªçc sinh nh·∫≠n di·ªán."""
        group = QGroupBox("Danh s√°ch nh·∫≠n di·ªán")
        layout = QVBoxLayout()
        self.student_list_widget = QListWidget()
        
        # --- THAY ƒê·ªîI 1: √Åp d·ª•ng Style Sheet v√† ƒë·ªïi con tr·ªè chu·ªôt ---
        self.student_list_widget.setCursor(Qt.PointingHandCursor)
        self.student_list_widget.setStyleSheet("""
            QListWidget::item:selected, QListWidget::item:selected:!active {
                background-color: #3399ff;
                color: white;
                font-weight: bold;
            }
            QListWidget::item:hover {
                background-color: #e0e0e0;
            }
        """)
        # -----------------------------------------------------------
        layout.addWidget(self.student_list_widget)
        group.setLayout(layout)
        self.student_list_widget.setSelectionMode(QListWidget.SingleSelection)  # ho·∫∑c ExtendedSelection n·∫øu c·∫ßn ch·ªçn nhi·ªÅu
        self.student_list_widget.setFocusPolicy(Qt.StrongFocus)
        return group

    def create_info_group(self):
        """T·∫°o group box cho th√¥ng tin chi ti·∫øt h·ªçc sinh."""
        group = QGroupBox("Thao t√°c")
        layout = QVBoxLayout()
        
        # ‚úÖ TH√äM N√öT
        self.add_student_button = QPushButton("Th√™m h·ªçc sinh m·ªõi")
        self.add_student_button.clicked.connect(self.add_new_student)
        self.add_student_button.setVisible(False) # M·∫∑c ƒë·ªãnh ·∫©n
        layout.addWidget(self.add_student_button)

        self.edit_student_button = QPushButton("S·ª≠a th√¥ng tin")
        self.edit_student_button.clicked.connect(self.edit_student)
        self.edit_student_button.setVisible(False) # M·∫∑c ƒë·ªãnh ·∫©n
        layout.addWidget(self.edit_student_button)

        self.delete_button = QPushButton("X√≥a h·ªçc sinh")
        self.delete_button.clicked.connect(self.delete_selected_student)
        self.delete_button.setVisible(False) # M·∫∑c ƒë·ªãnh ·∫©n
        layout.addWidget(self.delete_button)

        group.setLayout(layout)
        return group

    def create_controls_group(self):
        """T·∫°o group box cho c√°c n√∫t ƒëi·ªÅu khi·ªÉn."""
        group = QGroupBox("Ngu·ªìn D·ªØ li·ªáu")
        layout = QGridLayout()
        
        icon_cam = self.style().standardIcon(QStyle.SP_ComputerIcon)
        icon_vid = self.style().standardIcon(QStyle.SP_DriveHDIcon)
        icon_img = self.style().standardIcon(QStyle.SP_DriveNetIcon)

        self.open_cam_button = QPushButton(icon_cam, " M·ªü Camera")
        self.open_video_button = QPushButton(icon_vid, " M·ªü Video MP4")
        self.open_image_button = QPushButton(icon_img, " M·ªü ·∫¢nh")

        layout.addWidget(self.open_cam_button, 0, 0)
        layout.addWidget(self.open_video_button, 0, 1)
        layout.addWidget(self.open_image_button, 0, 2)
        
        group.setLayout(layout)

        self.open_cam_button.clicked.connect(self.start_camera)
        self.open_video_button.clicked.connect(self.browse_video_file)
        self.open_image_button.clicked.connect(self.browse_img_file)
        
        return group

    def create_video_controls(self):
        """T·∫°o widget ch·ª©a c√°c n√∫t ƒëi·ªÅu khi·ªÉn video."""
        widget = QWidget()
        layout = QHBoxLayout(widget)
        layout.setContentsMargins(0, 5, 0, 5)

        # N√∫t Play/Pause
        self.play_pause_button = QPushButton()
        self.play_pause_button.setIcon(self.style().standardIcon(QStyle.SP_MediaPlay))
        self.play_pause_button.clicked.connect(self.toggle_play)

        # S·ª≠ d·ª•ng CustomSlider
        self.video_slider = CustomSlider(Qt.Horizontal)
        self.video_slider.setMinimum(0)
        self.video_slider.setValue(0)
        self.video_slider.sliderReleased.connect(self.seek_video)

        # Nh√£n th·ªùi gian
        self.time_label = QLabel("00:00 / 00:00")
        self.time_label.setFixedWidth(120)  # ƒê·∫∑t chi·ªÅu r·ªông c·ªë ƒë·ªãnh ƒë·ªÉ giao di·ªán g·ªçn g√†ng
        self.time_label.setAlignment(Qt.AlignCenter)  # CƒÉn gi·ªØa ƒë·ªÉ ƒë·∫πp h∆°n

        layout.addWidget(self.play_pause_button)
        layout.addWidget(self.video_slider)
        layout.addWidget(self.time_label)

        self.video_controls_widget = widget
        return widget

    def update_video_slider(self, current, total):
        """C·∫≠p nh·∫≠t thanh slider v√† th·ªùi gian video."""
        if not self.thread or not self.thread.cap or not self.thread.cap.isOpened():
            logging.warning("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t slider: VideoCapture kh√¥ng kh·∫£ d·ª•ng.")
            self.time_label.setText("00:00 / 00:00")
            self.video_slider.setValue(0)
            return

        # C·∫≠p nh·∫≠t gi√° tr·ªã slider
        self.video_slider.setMaximum(total)
        self.video_slider.setValue(current)

        # L·∫•y FPS t·ª´ video, m·∫∑c ƒë·ªãnh 30 n·∫øu kh√¥ng h·ª£p l·ªá
        fps = self.thread.cap.get(cv2.CAP_PROP_FPS)
        if fps <= 0 or not np.isfinite(fps):
            fps = 30
            logging.warning("FPS kh√¥ng h·ª£p l·ªá, s·ª≠ d·ª•ng m·∫∑c ƒë·ªãnh 30.")

        # T√≠nh th·ªùi gian
        current_time = current / fps
        total_time = total / fps
        current_min = int(current_time // 60)
        current_sec = int(current_time % 60)
        total_min = int(total_time // 60)
        total_sec = int(total_time % 60)

        # C·∫≠p nh·∫≠t nh√£n th·ªùi gian
        self.time_label.setText(f"{current_min:02d}:{current_sec:02d} / {total_min:02d}:{total_sec:02d}")
        logging.debug(f"C·∫≠p nh·∫≠t slider: frame {current}/{total}, th·ªùi gian {current_min:02d}:{current_sec:02d}/{total_min:02d}:{total_sec:02d}")

    def toggle_play(self):
        # N·∫øu thread kh√¥ng c√≤n ch·∫°y, ph√°t l·∫°i t·ª´ ƒë·∫ßu n·∫øu l√† video
        if not self.thread or not self.thread.isRunning():
            if hasattr(self, 'last_video_file') and isinstance(self.last_video_file, str):
                self.play_video(self.last_video_file)
            return

        # N·∫øu thread ƒëang ch·∫°y, toggle pause
        self.thread.toggle_pause()
        icon = self.style().standardIcon(
            QStyle.SP_MediaPause if not self.thread._is_paused else QStyle.SP_MediaPlay
        )
        self.play_pause_button.setIcon(icon)

    def play_video(self, file_path):
        """M·ªü video v√† kh·ªüi t·∫°o th·ªùi gian ban ƒë·∫ßu."""
        self.stop_thread()
        self.clear_student_info()
        self.video_controls_widget.setVisible(True)
        try:
            # Ki·ªÉm tra file video tr∆∞·ªõc khi kh·ªüi t·∫°o thread
            test_cap = cv2.VideoCapture(file_path)
            if not test_cap.isOpened():
                raise RuntimeError("Kh√¥ng th·ªÉ m·ªü video.")
            total_frames = int(test_cap.get(cv2.CAP_PROP_FRAME_COUNT))
            fps = test_cap.get(cv2.CAP_PROP_FPS)
            if fps <= 0 or not np.isfinite(fps):
                fps = 30
            total_time = total_frames / fps
            total_min = int(total_time // 60)
            total_sec = int(total_time % 60)
            test_cap.release()

            self.time_label.setText(f"00:00 / {total_min:02d}:{total_sec:02d}")
            self.video_slider.setMaximum(total_frames)
            self.video_slider.setValue(0)

            self.thread = VideoThread(
                        input_source=file_path,
                        known_students=self.known_students,
                        face_processor=self.face_processor, 
                        parent=self
                    )
            self.connect_thread_signals()
            self.thread.start()

        except Exception as e:
            logging.error(f"L·ªói khi m·ªü video: {str(e)}")
            self.show_error_message(f"L·ªói khi m·ªü video: {str(e)}")
            self.time_label.setText("00:00 / 00:00")
            self.video_slider.setValue(0)


    def pause_for_seek(self):
        if self.thread:
            self.thread._is_paused = True

    def seek_to_position(self):
        if self.thread and self.thread.isRunning():
            frame = self.video_slider.value()
            self.thread.seek_to_frame(frame)
            #self.thread._is_paused = False

    def seek_video(self):
        """L·∫•y gi√° tr·ªã t·ª´ slider v√† y√™u c·∫ßu thread tua ƒë·∫øn frame ƒë√≥."""
        if self.thread and self.thread.isRunning():
            frame_number = self.video_slider.value()
            self.thread.seek_to_frame(frame_number)
            logging.debug(f"Y√™u c·∫ßu tua video ƒë·∫øn frame {frame_number}")
    
    def display_student_info(self, current, previous=None):
        student_id = current.data(Qt.UserRole)
        self.selected_student_id = student_id
        # N·∫øu kh√¥ng c√≥ ID (v√≠ d·ª•: click v√†o "Ng∆∞·ªùi l·∫°"), th√¨ x√≥a th√¥ng tin v√† ·∫©n n√∫t S·ª≠a
        if student_id is None:
            self.add_student_button.setVisible(True)
            return
        
        # ‚úÖ Tra c·ª©u trong dictionary
        student = self.known_students_dict.get(student_id)
        
        if student:
            self.edit_student_button.setVisible(True) # ‚úÖ HI·ªÜN N√öT S·ª¨A
            self.delete_button.setVisible(True) # M·∫∑c ƒë·ªãnh ·∫©n
        else:
            self.clear_student_info() # G·ªçi h√†m x√≥a ƒë·ªÉ ·∫©n n√∫t

    # === TH√äM H·ªåC SINH M·ªöI ===
    def add_new_student(self):
        """H√†m ch√≠nh ƒëi·ªÅu ph·ªëi vi·ªác th√™m h·ªçc sinh m·ªõi."""
        if self.current_frame is None:
            QMessageBox.warning(self, "L·ªói", "Ch∆∞a c√≥ h√¨nh ·∫£nh. Vui l√≤ng m·ªü camera ho·∫∑c ch·ªçn ·∫£nh tr∆∞·ªõc.")
            return

        # B∆∞·ªõc 1: L·∫•y th√¥ng tin t·ª´ dialog
        student_data = self._get_data_from_dialog()
        if not student_data:
            return

        # B∆∞·ªõc 2: L·∫•y m√£ h√≥a khu√¥n m·∫∑t, H√†m get_single_face_encoding tr·∫£ v·ªÅ (results, encoding)
        _, face_encoding = self.face_processor.get_single_face_encoding(student_data["image"], self.known_students)
        if face_encoding is None:
            QMessageBox.warning(self, "L·ªói", "Kh√¥ng th·ªÉ l·∫•y m√£ khu√¥n m·∫∑t. Vui l√≤ng ki·ªÉm tra ·∫£nh ƒë·∫ßu v√†o v√† ƒë·∫£m b·∫£o ch·ªâ c√≥ m·ªôt khu√¥n m·∫∑t.")
            return

        # B∆∞·ªõc 3: L∆∞u v√†o CSDL v√† l·∫•y ID c·ªßa h·ªçc sinh m·ªõi
        new_student_id = self._save_student_to_db(student_data, face_encoding)
        if not new_student_id:
            return # Th√¥ng b√°o l·ªói ƒë√£ ƒë∆∞·ª£c hi·ªÉn th·ªã trong h√†m con

        # B∆∞·ªõc 4: Th√™m v√†o Faiss
        import faiss_manager
        faiss_manager.add_to_index(new_student_id, face_encoding)

        # B∆∞·ªõc 5: C·∫≠p nh·∫≠t giao di·ªán
        self._update_ui_after_add(new_student_id)
        QMessageBox.information(self, "Th√†nh c√¥ng", f"ƒê√£ th√™m h·ªçc sinh {student_data['name']}.")

    # === S·ª¨A H·ªåC SINH ===
    def edit_student(self, student: dict = None, frame=None):
        if self.current_frame is None:
            QMessageBox.warning(self, "L·ªói", "Ch∆∞a c√≥ h√¨nh ·∫£nh. Vui l√≤ng m·ªü camera tr∆∞·ªõc.")
            return

        if self.selected_student_id: 
            student = next((s for s in self.known_students if s['id'] == self.selected_student_id), None)
            if not student:
                return

            dialog = AddStudentDialog(existing_data=student, parent=self)
            result = dialog.exec()
            new_image = None
            if result == QDialog.Accepted:
                updated_data = dialog.get_data()
                new_image = updated_data.pop("new_image", None)
                new_encoding = None
                if new_image is not None:
                    _, new_encoding = self.face_processor.get_single_face_encoding(new_image, [])
                    if new_encoding is None:
                        QMessageBox.warning(self, "L·ªói ·∫£nh", "Kh√¥ng t√¨m th·∫•y khu√¥n m·∫∑t trong ·∫£nh m·ªõi ho·∫∑c c√≥ qu√° nhi·ªÅu khu√¥n m·∫∑t.")
                        return
                    self.current_frame = new_image

                success = db.update_student(
                    self.selected_student_id,
                    updated_data['name'],
                    updated_data['dob'],
                    updated_data['class'],
                    updated_data['gender'],
                    updated_data['school_year'],
                    updated_data['stt'],
                    updated_data['image_path'],
                    face_encoding= new_encoding if new_encoding is not None else student['face_encoding']
                )

                if success:
                    QMessageBox.information(self, "Th√†nh c√¥ng", "C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng.")
                    # L·∫•y l·∫°i danh s√°ch m·ªõi t·ª´ DB
                    list_of_students = db.get_all_students()
                    self.known_students = list_of_students
                    # ‚úÖ C·∫≠p nh·∫≠t l·∫°i dictionary ƒë·ªÉ tra c·ª©u nhanh
                    self.known_students_dict = {s['id']: s for s in list_of_students}
                    self.update_results(self.recognition_results)

                    if new_encoding is not None:
                        faiss_manager.remove_from_index(self.selected_student_id)
                        faiss_manager.add_to_index(self.selected_student_id, new_encoding)
                        print(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t Faiss cho h·ªçc sinh ID {self.selected_student_id} (ƒë·ªïi ·∫£nh).")
                    else:
                        print(f"‚úÖ Kh√¥ng ƒë·ªïi ·∫£nh, kh√¥ng c·∫≠p nh·∫≠t Faiss.")

                    current_item = self.student_list_widget.currentItem()
                    if current_item:
                        self.display_student_info(current_item)
                else:
                    QMessageBox.warning(self, "L·ªói", "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t th√¥ng tin.")
        
    # --- C√ÅC H√ÄM CON TR·ª¢ GI√öP ---
    def _get_data_from_dialog(self):
        """M·ªü dialog, l·∫•y v√† x√°c th·ª±c d·ªØ li·ªáu ng∆∞·ªùi d√πng nh·∫≠p."""
        dialog = AddStudentDialog(self.current_frame, parent=self)
        if dialog.exec() != QDialog.Accepted:
            return None # Ng∆∞·ªùi d√πng nh·∫•n Cancel

        student_data = dialog.get_data()
        if not student_data:
            return None

        # X√°c th·ª±c c√°c tr∆∞·ªùng b·∫Øt bu·ªôc
        required_fields = ["code","name", "dob", "class", "stt"]
        if not all(student_data.get(field) for field in required_fields):
            QMessageBox.warning(self, "Thi·∫øu th√¥ng tin", "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß c√°c tr∆∞·ªùng c·∫ßn thi·∫øt.")
            return None

        return student_data

    def _save_student_to_db(self, student_data, face_encoding):
        """L∆∞u th√¥ng tin h·ªçc sinh v√†o CSDL v√† tr·∫£ v·ªÅ ID."""
        new_id = db.add_student(
            student_id = student_data["code"],
            name=student_data["name"],
            dob=student_data["dob"],
            student_class=student_data["class"],
            face_encoding=face_encoding,
            gender=student_data["gender"],
            school_year=student_data["school_year"],
            stt=student_data["stt"],
            image_path=student_data["image_path"]
        )
        if not new_id:
            QMessageBox.critical(self, "L·ªói", "Kh√¥ng th·ªÉ th√™m h·ªçc sinh. M√£ khu√¥n m·∫∑t c√≥ th·ªÉ ƒë√£ t·ªìn t·∫°i trong CSDL.")
            return None
        return new_id

    def _update_ui_after_add(self, new_student_id):
        """T·∫£i l·∫°i d·ªØ li·ªáu v√† l√†m m·ªõi giao di·ªán sau khi th√™m th√†nh c√¥ng."""
        # 1. T·∫£i l·∫°i danh s√°ch h·ªçc sinh t·ª´ CSDL
        self.known_students = db.get_all_students()
        self.known_students_dict = {s['id']: s for s in self.known_students}

        # 2. Ch·∫°y l·∫°i nh·∫≠n di·ªán tr√™n frame hi·ªán t·∫°i ƒë·ªÉ c·∫≠p nh·∫≠t t√™n
        if self.current_frame is not None:
            # S·ª≠ d·ª•ng h√†m get_single_face_encoding ƒë√£ t·∫°o ·ªü g·ª£i √Ω tr∆∞·ªõc
            results, _  = self.face_processor.get_single_face_encoding(self.current_frame, self.known_students)
            self.update_results(results)
            self.update_image(self.current_frame)

        # 3. T·ª± ƒë·ªông ch·ªçn h·ªçc sinh v·ª´a th√™m trong danh s√°ch
        for i in range(self.student_list_widget.count()):
            item = self.student_list_widget.item(i)
            if item.data(Qt.UserRole) == new_student_id:
                self.student_list_widget.setCurrentItem(item)
                self.display_student_info(item)
                break

        # (3) Ch·ªâ build l·∫°i Faiss n·∫øu th√™m h·ªçc sinh th√†nh c√¥ng
        print("C·∫≠p nh·∫≠t ch·ªâ m·ª•c Faiss sau khi th√™m th√†nh c√¥ng...")
        faiss_manager.build_and_save_index()
        self._reload_faiss_to_faceprocessor()
        print("ƒê√£ c·∫≠p nh·∫≠t ch·ªâ m·ª•c Faiss.")

    def delete_selected_student(self):
        if not self.selected_student_id:
            QMessageBox.information(self, "Th√¥ng b√°o", "Ch∆∞a ch·ªçn h·ªçc sinh n√†o ƒë·ªÉ x√≥a.")
            return

        confirm = QMessageBox.question(
            self,
            "X√°c nh·∫≠n x√≥a",
            "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a h·ªçc sinh n√†y?",
            QMessageBox.Yes | QMessageBox.No
        )

        if confirm == QMessageBox.Yes:
            success = db.delete_student(self.selected_student_id)
            if success:
                QMessageBox.information(self, "Th√†nh c√¥ng", "ƒê√£ x√≥a h·ªçc sinh.")
                faiss_manager.remove_from_index(self.selected_student_id)
                self.clear_student_info()
                # L·∫•y l·∫°i danh s√°ch m·ªõi t·ª´ DB
                list_of_students = db.get_all_students()
                self.known_students = list_of_students
                # ‚úÖ C·∫≠p nh·∫≠t l·∫°i dictionary ƒë·ªÉ tra c·ª©u nhanh
                self.known_students_dict = {s['id']: s for s in list_of_students}
                self.update_results([])  # ·∫®n khu√¥n m·∫∑t c≈©
                print("C·∫≠p nh·∫≠t ch·ªâ m·ª•c Faiss sau khi x√≥a th√†nh c√¥ng...")
                faiss_manager.build_and_save_index()
                self._reload_faiss_to_faceprocessor()
                print("ƒê√£ c·∫≠p nh·∫≠t ch·ªâ m·ª•c Faiss.")
            else:
                QMessageBox.critical(self, "L·ªói", "Kh√¥ng th·ªÉ x√≥a h·ªçc sinh.")
    def _reload_faiss_to_faceprocessor(self):
        self.faiss_index, self.id_mapping = faiss_manager.load_index()
        self.face_processor.faiss_index = self.faiss_index
        self.face_processor.id_mapping = self.id_mapping

    def on_image_click(self, event):
        """
        X·ª≠ l√Ω s·ª± ki·ªán click chu·ªôt l√™n ·∫£nh, t√¨m v√† ch·ªçn h·ªçc sinh t∆∞∆°ng ·ª©ng.
        S·ª≠a l·ªói: Th√™m b∆∞·ªõc map t·ªça ƒë·ªô t·ª´ QLabel sang QPixmap ƒë·ªÉ ho·∫°t ƒë·ªông ƒë√∫ng v·ªõi ·∫£nh tƒ©nh.
        """
        start_time = time()
        # --- C√°c b∆∞·ªõc ki·ªÉm tra ƒëi·ªÅu ki·ªán ---
        pixmap = self.image_label.pixmap()
        if not pixmap or pixmap.isNull() or not self.recognition_results or not hasattr(self, 'scaler'):
            return
        if not self.scaler.scale_ratio > 0:
            return

        # --- B∆∞·ªõc 1: √Ånh x·∫° t·ªça ƒë·ªô click t·ª´ QLabel sang QPixmap ---
        label_w = self.image_label.width()
        label_h = self.image_label.height()
        pixmap_w = pixmap.width()
        pixmap_h = pixmap.height()

        # T·ªça ƒë·ªô click th·ª±c s·ª± tr√™n ·∫£nh (ƒë√£ t√≠nh ƒë·∫øn vi·ªác ·∫£nh b·ªã co gi√£n)
        click_x = int(event.x() * pixmap_w / label_w)
        click_y = int(event.y() * pixmap_h / label_h)

        # --- B∆∞·ªõc 2: T√≠nh to√°n scale v√† l·∫≠t (gi·ªØ nguy√™n nh∆∞ c≈©) ---
        final_scale_factor = self.scaler.scale_ratio / RESIZE_FACTOR
        display_w = pixmap_w

        # --- B∆∞·ªõc 3: Duy·ªát v√† so s√°nh ---
        for result in self.recognition_results:
            loc = result.get("location")
            if not loc:
                continue

            # Scale t·ªça ƒë·ªô box v·ªÅ kh√¥ng gian hi·ªÉn th·ªã (pixmap)
            top, right, bottom, left = loc
            scaled_top = int(top * final_scale_factor)
            scaled_bottom = int(bottom * final_scale_factor)
            scaled_left = int(left * final_scale_factor)
            scaled_right = int(right * final_scale_factor)

            # L·∫≠t t·ªça ƒë·ªô box ƒë·ªÉ so s√°nh v√¨ ·∫£nh hi·ªÉn th·ªã ƒë√£ b·ªã l·∫≠t
            flipped_box_left = display_w - scaled_right
            flipped_box_right = display_w - scaled_left

            # So s√°nh t·ªça ƒë·ªô click ƒê√É √ÅNH X·∫† v·ªõi t·ªça ƒë·ªô box ƒê√É L·∫¨T
            if flipped_box_left < click_x < flipped_box_right and scaled_top < click_y < scaled_bottom:
                # T√¨m item trong danh s√°ch v√† ch·ªçn n√≥
                for i in range(self.student_list_widget.count()):
                    item = self.student_list_widget.item(i)
                    if item.data(Qt.UserRole) == result["id"]:
                        self.student_list_widget.setCurrentItem(item)
                        self.display_student_info(item)
                        break
                break
        end_time = time()
        response_time = (end_time - start_time) * 1000  # Chuy·ªÉn sang ms
        logging.info(f"Th·ªùi gian ph·∫£n h·ªìi khi click v√†o ·∫£nh: {response_time:.2f} ms")
    
    def start_camera(self):
        self.stop_thread()
        self.clear_student_info()
        self.video_controls_widget.setVisible(False) 
        self.thread = VideoThread(
                        input_source=0,
                        known_students=self.known_students,
                        face_processor=self.face_processor, 
                        parent=self
                    )
        self.connect_thread_signals()
        self.thread.start()

    def browse_video_file(self):
        self.stop_thread()
        self.clear_student_info()
        file_name, _ = QFileDialog.getOpenFileName(self, "M·ªü Video", "", "Video Files (*.mp4 *.avi)")
        print(f"ƒê∆∞·ªùng d·∫´n video: {file_name}")  # Th√™m d√≤ng n√†y ƒë·ªÉ ki·ªÉm tra
        self.recognition_results = []
        if file_name:
            self.last_video_file = file_name
            self.play_video(self.last_video_file)


    def browse_img_file(self):
        self.stop_thread() 
        file_name, _ = QFileDialog.getOpenFileName(self, "M·ªü ·∫¢nh", "", "Image Files (*.jpg *.png *.jpeg)")
        if not file_name:
            return

        img = cv2.imread(file_name)
        if img is not None:
            # 1. D·ª´ng lu·ªìng video hi·ªán t·∫°i (n·∫øu c√≥)
            self.stop_thread()
            self.clear_student_info()
            self.video_controls_widget.setVisible(False)

            # 2. G·ªçi h√†m nh·∫≠n di·ªán khu√¥n m·∫∑t   
            results, encodings = self.face_processor.get_single_face_encoding(img, self.known_students)

            # 3. C·∫≠p nh·∫≠t tr·∫°ng th√°i v√† g·ªçi tr·ª±c ti·∫øp c√°c h√†m c·∫≠p nh·∫≠t GUI
            self.recognition_results = []
            self.current_frame = img
            self.face_encoding = encodings

            self.update_results(results)
            self.update_image(img)
        else:
            QMessageBox.warning(self, "L·ªói", "Kh√¥ng th·ªÉ ƒë·ªçc t·ªáp ·∫£nh n√†y!")

    def connect_thread_signals(self):
        if not self.thread:
            return
        self.thread.change_pixmap_signal.connect(self.update_image)
        self.thread.update_results_signal.connect(self.update_results)
        self.thread.finished_signal.connect(self.on_thread_finished)
        self.thread.error_signal.connect(self.show_error_message)
        self.thread.fps_signal.connect(self.update_fps_display)  # K·∫øt n·ªëi t√≠n hi·ªáu FPS
        if isinstance(self.thread.input_source, str) and self.thread.total_frames > 1:
            self.thread.progress_signal.connect(self.update_video_slider)
        logging.debug("ƒê√£ k·∫øt n·ªëi c√°c t√≠n hi·ªáu c·ªßa thread.")

    def show_error_message(self, message):
        QMessageBox.critical(self, "L·ªói", message)

    def update_fps_display(self, fps):
        """Hi·ªÉn th·ªã FPS tr√™n thanh tr·∫°ng th√°i."""
        self.statusBar().showMessage(f"FPS: {fps:.2f}")
    
    def on_thread_finished(self):
        if self.play_pause_button:
            self.play_pause_button.setIcon(self.style().standardIcon(QStyle.SP_MediaPlay))

        if self.thread and isinstance(self.thread.input_source, str):
            # N·∫øu l√† video, reset v·ªÅ ƒë·∫ßu v√† pause
            self.thread._is_paused = True
            self.thread.seek_to_frame(0)  # Tua v·ªÅ frame ƒë·∫ßu ti√™n
            # ƒê·∫£m b·∫£o thanh ƒëi·ªÅu khi·ªÉn lu√¥n hi·ªÉn th·ªã
            if self.video_controls_widget:
                self.video_controls_widget.setVisible(True)
        else:
            # N·∫øu l√† camera ho·∫∑c ·∫£nh, t·∫Øt controls
            if self.video_controls_widget:
                self.video_controls_widget.setVisible(False)


    def update_image(self, img):
        """
        C·∫≠p nh·∫≠t v√† hi·ªÉn th·ªã ·∫£nh, s·ª≠ d·ª•ng QPainter cho TO√ÄN B·ªò thao t√°c v·∫Ω (h·ªôp v√† ch·ªØ).
        T·ªëi ∆∞u h∆°n b·∫±ng c√°ch lo·∫°i b·ªè cv2.rectangle v√† ch·ªâ l·∫∑p qua c√°c k·∫øt qu·∫£ m·ªôt l·∫ßn.
        """
        if not isinstance(img, np.ndarray):
            return

        # --- B∆∞·ªõc 1: Chu·∫©n b·ªã ·∫£nh n·ªÅn ---
        self.current_frame = img  # L∆∞u ·∫£nh g·ªëc
        display_img = self.scaler.resize_image(img) # Resize ·∫£nh v·ªÅ k√≠ch th∆∞·ªõc hi·ªÉn th·ªã
        
        # L·∫≠t ·∫£nh ngay t·ª´ ƒë·∫ßu ƒë·ªÉ m·ªçi t·ªça ƒë·ªô v·∫Ω sau n√†y ƒë·ªÅu n·∫±m trong kh√¥ng gian ƒë√£ l·∫≠t
        flipped_img = cv2.flip(display_img, 1)
        
        # Chuy·ªÉn ·∫£nh numpy (BGR) sang QImage ƒë·ªÉ QPainter c√≥ th·ªÉ v·∫Ω l√™n
        h, w, ch = flipped_img.shape
        qt_image = QImage(flipped_img.data, w, h, ch * w, QImage.Format_BGR888)

        # --- B∆∞·ªõc 2: Chu·∫©n b·ªã v√† th·ª±c hi·ªán v·∫Ω ---
        painter = QPainter(qt_image)
        font = painter.font()
        font.setPointSize(12)
        painter.setFont(font)

        # T√≠nh to√°n c√°c gi√° tr·ªã c·∫ßn thi·∫øt ch·ªâ m·ªôt l·∫ßn
        final_scale_factor = self.scaler.scale_ratio / RESIZE_FACTOR
        display_w = qt_image.width()
        results_to_draw = self.recognition_results if self.recognition_results else self.last_results

        # --- B∆∞·ªõc 3: V√≤ng l·∫∑p v·∫Ω duy nh·∫•t ---
        for result in results_to_draw:
            loc = result.get("location")
            if not loc:
                continue

            # Scale t·ªça ƒë·ªô g·ªëc t·ª´ kh√¥ng gian nh·∫≠n di·ªán sang kh√¥ng gian hi·ªÉn th·ªã
            top, right, bottom, left = loc
            scaled_top = int(top * final_scale_factor)
            scaled_bottom = int(bottom * final_scale_factor)
            scaled_left = int(left * final_scale_factor)
            scaled_right = int(right * final_scale_factor)

            # X√°c ƒë·ªãnh m√†u s·∫Øc
            is_stranger = result.get("id") is None
            color = QColor(255, 0, 0) if is_stranger else QColor(0, 255, 0)
            
            pen = QPen(color, 2) # T·∫°o b√∫t v·∫Ω v·ªõi m√†u v√† ƒë·ªô d√†y
            painter.setPen(pen)

            # T√≠nh to√°n t·ªça ƒë·ªô v√† k√≠ch th∆∞·ªõc c·ªßa h·ªôp trong kh√¥ng gian ƒê√É L·∫¨T
            # T·ªça ƒë·ªô y kh√¥ng ƒë·ªïi, t·ªça ƒë·ªô x ƒë∆∞·ª£c l·∫≠t qua tr·ª•c gi·ªØa c·ªßa ·∫£nh
            flipped_left = display_w - scaled_right
            rect_w = scaled_right - scaled_left
            rect_h = scaled_bottom - scaled_top
            
            # 1. V·∫Ω h·ªôp ch·ªØ nh·∫≠t
            painter.drawRect(flipped_left, scaled_top, rect_w, rect_h)

            # 2. V·∫Ω t√™n
            # ƒêo k√≠ch th∆∞·ªõc ch·ªØ ƒë·ªÉ cƒÉn gi·ªØa ph√≠a tr√™n h·ªôp
            metrics = painter.fontMetrics()
            text_width = metrics.horizontalAdvance(result["name"])
            text_x = flipped_left + (rect_w - text_width) // 2
            text_y = scaled_top - 5 # D·ªãch l√™n 5 pixel so v·ªõi c·∫°nh tr√™n c·ªßa h·ªôp
            
            # V·∫Ω n·ªÅn cho ch·ªØ ƒë·ªÉ d·ªÖ ƒë·ªçc h∆°n
            painter.fillRect(QRect(text_x - 2, text_y - metrics.ascent(), text_width + 4, metrics.height()), color)
            
            # ƒê·∫∑t l·∫°i b√∫t v·∫Ω cho m√†u ch·ªØ (v√≠ d·ª•: m√†u tr·∫Øng)
            painter.setPen(QColor(255, 255, 255))
            painter.drawText(text_x, text_y, result["name"])
            
        painter.end() # K·∫øt th√∫c vi·ªác v·∫Ω

        # --- B∆∞·ªõc 4: Hi·ªÉn th·ªã ·∫£nh ƒë√£ v·∫Ω l√™n QLabel ---
        new_pixmap = QPixmap.fromImage(qt_image)
        self.image_label.setPixmap(new_pixmap)
        self.current_pixmap = new_pixmap

    def update_results(self, results):
        """
        C·∫≠p nh·∫≠t danh s√°ch nh·∫≠n di·ªán. Ch·ªâ v·∫Ω l·∫°i widget n·∫øu danh s√°ch ID thay ƒë·ªïi.
        """
        # 1. Tr√≠ch xu·∫•t danh s√°ch ID t·ª´ k·∫øt qu·∫£ m·ªõi v√† c≈© ƒë·ªÉ so s√°nh
        # D√πng tuple ƒë√£ s·∫Øp x·∫øp ƒë·ªÉ vi·ªác so s√°nh ƒë√°ng tin c·∫≠y
        new_ids = tuple(sorted(r.get("id") for r in results if r.get("id") is not None))
        old_ids = tuple(sorted(r.get("id") for r in self.recognition_results if r.get("id") is not None))

        # ƒê·∫øm s·ªë ng∆∞·ªùi l·∫° ·ªü m·ªói k·∫øt qu·∫£
        new_strangers = sum(1 for r in results if r.get("id") is None)
        old_strangers = sum(1 for r in self.recognition_results if r.get("id") is None)

        # 2. N·∫øu danh s√°ch ID v√† s·ªë ng∆∞·ªùi l·∫° kh√¥ng c√≥ g√¨ thay ƒë·ªïi, tho√°t s·ªõm
        if new_ids == old_ids and new_strangers == old_strangers:
            # C·∫≠p nh·∫≠t l·∫°i recognition_results ƒë·ªÉ ch·ª©a t·ªça ƒë·ªô m·ªõi nh·∫•t, nh∆∞ng kh√¥ng v·∫Ω l·∫°i widget
            self.recognition_results = results
            return

        # --- Ch·ªâ th·ª±c hi·ªán c√°c b∆∞·ªõc d∆∞·ªõi ƒë√¢y n·∫øu c√≥ s·ª± thay ƒë·ªïi v·ªÅ ng∆∞·ªùi trong khung h√¨nh ---

        # 3. C·∫≠p nh·∫≠t k·∫øt qu·∫£ v√† l·∫•y item ƒëang ƒë∆∞·ª£c ch·ªçn (n·∫øu c√≥)
        self.recognition_results = results
        current_selected_id = None
        if self.student_list_widget.currentItem():
            current_selected_id = self.student_list_widget.currentItem().data(Qt.UserRole)

        self.student_list_widget.clear()

        for result in results:
            # Ph·∫ßn code c√≤n l·∫°i c·ªßa b·∫°n ƒë·ªÉ t·∫°o v√† th√™m item gi·ªØ nguy√™n
            student_id = result.get("id")
            student_class = ""
            student_name = "Ng∆∞·ªùi l·∫°"
            
            # L·∫•y th√¥ng tin chi ti·∫øt n·∫øu l√† h·ªçc sinh ƒë√£ bi·∫øt
            if student_id is not None and student_id in self.known_students_dict:
                student_info = self.known_students_dict[student_id]
                student_class = student_info.get("class", "")
                student_name = student_info.get("name", "")

            # ƒê·ªãnh d·∫°ng n·ªôi dung item
            item_text = (
                "--------------------\n"
                f"ID: {'N/A' if student_id is None else student_id}\n"
                f"H·ªç v√† t√™n: {student_name}\n"
                f"L·ªõp: {student_class}\n"
                "--------------------"
            )
            item = QListWidgetItem(item_text)
            item.setData(Qt.UserRole, student_id)
            item.setSizeHint(QSize(item.sizeHint().width(), 80)) # ƒêi·ªÅu ch·ªânh chi·ªÅu cao

            if student_id is None:
                item.setForeground(Qt.red)

            self.student_list_widget.addItem(item)
            
            # Ch·ªçn l·∫°i item n·∫øu n√≥ v·∫´n c√≤n trong danh s√°ch m·ªõi
            if current_selected_id is not None and student_id == current_selected_id:
                self.student_list_widget.setCurrentItem(item)

    def clear_student_info(self):
        """X√≥a th√¥ng tin v√† ·∫©n n√∫t S·ª≠a."""
        self.selected_student_id = None # X√≥a ID ƒë√£ l∆∞u
        # ‚úÖ TH√äM D√íNG N√ÄY ƒê·ªÇ X√ìA HIGHLIGHT
        if self.student_list_widget:
            self.student_list_widget.setCurrentItem(None)

        if self.edit_student_button:
            self.edit_student_button.setVisible(False) # ‚úÖ ·∫®N N√öT S·ª¨A
            self.add_student_button.setVisible(False) 
            self.delete_button.setVisible(False) # ·∫®N N√öT X√ìA   

    def stop_thread(self):
        if self.thread:
            self.thread.stop()
            self.thread.wait() # ƒê·ª£i thread k·∫øt th√∫c ho√†n to√†n
            self.thread = None
            logging.debug("ƒê√£ d·ª´ng thread video.")

    def update_fps_display(self, fps):
        """C·∫≠p nh·∫≠t gi√° tr·ªã FPS v√† hi·ªÉn th·ªã tr√™n thanh tr·∫°ng th√°i."""
        self.current_fps = fps
        self.update_status_bar()    

    def update_resource_usage(self):
        """C·∫≠p nh·∫≠t th√¥ng tin s·ª≠ d·ª•ng CPU, RAM, v√† GPU."""
        # CPU
        self.resource_info["cpu_usage"] = psutil.cpu_percent(interval=None)

        # RAM
        memory = psutil.virtual_memory()
        self.resource_info["ram_usage"] = memory.percent
        self.resource_info["ram_used"] = memory.used / (1024 ** 3)  # GB
        self.resource_info["ram_total"] = memory.total / (1024 ** 3)  # GB

        # GPU
        self.resource_info["gpu_usage"] = 0
        self.resource_info["gpu_memory_used"] = 0
        self.resource_info["gpu_memory_total"] = 0
        if self.gpu_available:
            try:
                device_count = pynvml.nvmlDeviceGetCount()
                if device_count > 0:
                    handle = pynvml.nvmlDeviceGetHandleByIndex(0)
                    self.resource_info["gpu_usage"] = pynvml.nvmlDeviceGetUtilizationRates(handle).gpu
                    mem_info = pynvml.nvmlDeviceGetMemoryInfo(handle)
                    self.resource_info["gpu_memory_used"] = mem_info.used / (1024 ** 3)  # GB
                    self.resource_info["gpu_memory_total"] = mem_info.total / (1024 ** 3)  # GB
            except pynvml.NVMLError as e:
                logging.warning(f"L·ªói khi l·∫•y th√¥ng tin GPU: {e}")

        self.update_status_bar()
        logging.info(f"Resource update: CPU {self.resource_info['cpu_usage']:.1f}%, "
                     f"RAM {self.resource_info['ram_used']:.1f}/{self.resource_info['ram_total']:.1f} GB, "
                     f"GPU {self.resource_info['gpu_usage']}%")

    def update_status_bar(self):
        """K·∫øt h·ª£p FPS v√† th√¥ng tin t√†i nguy√™n ƒë·ªÉ hi·ªÉn th·ªã tr√™n thanh tr·∫°ng th√°i."""
        status_msg = f"FPS: {self.current_fps:.2f} | "
        status_msg += (
            f"CPU: {self.resource_info['cpu_usage']:.1f}% | "
            f"RAM: {self.resource_info['ram_used']:.1f}/{self.resource_info['ram_total']:.1f} GB "
            f"({self.resource_info['ram_usage']:.1f}%)"
        )
        if self.gpu_available:
            status_msg += (
                f" | GPU: {self.resource_info['gpu_usage']}% | "
                f"GPU Mem: {self.resource_info['gpu_memory_used']:.1f}/{self.resource_info['gpu_memory_total']:.1f} GB"
            )
        self.status_bar.showMessage(status_msg)

    def closeEvent(self, event):
        """D·ªçn d·∫πp t√†i nguy√™n tr∆∞·ªõc khi ƒë√≥ng ·ª©ng d·ª•ng."""
        logging.info("ƒêang ƒë√≥ng ·ª©ng d·ª•ng, d·ªçn d·∫πp t√†i nguy√™n...")
        self.stop_thread()
        
        # T·∫ÆT EXECUTOR C·ª¶A FACE PROCESSOR
        if self.face_processor:
            self.face_processor.shutdown()
        
        self.known_students = None
        self.known_students_dict = None
        if self.gpu_available:
            pynvml.nvmlShutdown()  # T·∫Øt pynvml
        self.resource_timer.stop()  # D·ª´ng timer

        gc.collect()
        logging.info("ƒê√£ d·ªçn d·∫πp xong. T·∫°m bi·ªát!")
        event.accept()

if __name__ == "__main__":
    logging.basicConfig(encoding='utf-8', level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler("performance.log"),
            logging.StreamHandler()
        ]
    )
    db.create_table()
    app = QApplication(sys.argv)
    main_window = MainWindow()
    main_window.show()
    sys.exit(app.exec_())